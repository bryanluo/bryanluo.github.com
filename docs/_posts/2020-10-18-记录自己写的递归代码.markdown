---
layout: post
title:  "记录今天自己写的一个递归实现"
date:   2020-09-30 20:00:00 +0300
image:  09.jpg
tags:   Java
---

记录今天自己写的一个递归实现。

---

***具体代码如下:***

Menu:

```java
package com.jiang.entity;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@AllArgsConstructor
@NoArgsConstructor
public class Menu {

    private Long id;

    private String name;

    private Long pid;

    private String desc;

}
```

递归算法具体使用如下：

```java
package com.jiang;

import com.jiang.entity.Menu;
import org.junit.Test;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.LongStream;

/**
 *
 *  递归使用
 *
 */
public class RecursiveTest {

    static final List<Menu> menuList = new ArrayList<>();
    static {
        menuList.add(new Menu(1L, "menu01", 0L,""));
        menuList.add(new Menu(2L, "menu02", 1L, ""));
        menuList.add(new Menu(3L, "menu03", 2L, ""));
        menuList.add(new Menu(4L, "menu04", 2L, ""));
        menuList.add(new Menu(5L, "menu05", 0L, ""));
    }

    @Test
    public void menu(){
        List<Menu> rootList = menuList.stream().filter(menu -> menu.getPid() == 0L).collect(Collectors.toList());
        rootList.forEach(menu -> menu.setDesc("0"));
        List<Menu> finalMenuList = new ArrayList<>(rootList);
        for(Menu menu : rootList){
            finalMenuList.addAll(getChildMenu(menu.getId(), menuList));
        }
        System.out.println(finalMenuList);
    }


    private List<Menu> getChildMenu(long id, List<Menu> menuList){
        List<Menu> childList = new ArrayList<>();
        List<Menu> finalList = new ArrayList<>();
        menuList.forEach(menu -> {
            if(id == menu.getPid()){
                menu.setDesc("" + id);
                childList.add(menu);
                finalList.add(menu);
            }
        });

        for(Menu menu: childList){
            finalList.addAll(getChildMenu(menu.getId(), menuList));
        }
        return finalList;
    }


    /**
     * 迭代式的阶乘计算
     */
    @Test
    public void multiple(){
       long number = 10;
        System.out.println(factorialIterative(number));
        System.out.println(factorialStreams(number));

    }

    private long factorialIterative(long n){

        return n == 1? 1: n * factorialIterative(n -1 );
    }

    private long factorialStreams(long n){
        return LongStream.rangeClosed(1, n)
                .reduce(1, (long a, long b) -> a * b);
    }
}
```
